// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(uuid())
  username           String?  @unique
  displayName        String?
  email              String?  @unique
  password           String?
  googleId           String?  @unique
  googleAccessToken  String?
  googleRefreshToken String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  details   UserDetails?
  followers Follows[]    @relation("followers")
  following Follows[]    @relation("following")
  topics    UserTopic[]
  likes     Like[]
  posts     Post[]
  comments  Comment[]
  mentions  Mention[] // when this user is mentioned
  Bookmark  Bookmark[]
}

model UserDetails {
  id       String  @id @default(uuid())
  avatar   String?
  bio      String?
  github   String?
  linkedin String?
  twitter  String?
  location String?
  website  String?
  role     String?
  skills   String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Follows {
  id         String @id @default(uuid())
  follower   User   @relation("following", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("followers", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Topic {
  id    String      @id @default(uuid())
  name  String      @unique
  users UserTopic[]
  posts PostTopic[]
}

model UserTopic {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId String

  @@unique([userId, topicId])
}

model Post {
  id String @id @default(uuid())

  content String
  type    String

  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes    Like[]
  topics   PostTopic[]
  media    Media[]
  comments Comment[]
  mentions Mention[]
  links    Link[]
  Bookmark Bookmark[]
}

model Link {
  id     String @id @default(uuid())
  url    String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Bookmark {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model PostTopic {
  id      String @id @default(uuid())
  post    Post   @relation(fields: [postId], references: [id])
  postId  String
  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId String

  @@unique([postId, topicId])
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
}

model Media {
  id     String @id @default(uuid())
  url    String
  type   String // "image", "video", "link"
  post   Post   @relation(fields: [postId], references: [id])
  postId String
}

model Mention {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model user_sessions {
  sid    String   @id(map: "session_pkey") @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_user_sessions_expire")
}
